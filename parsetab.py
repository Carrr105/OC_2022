
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programanonassocLESSGREATERLESSEQUALGREATEREQUALEQUALS_BOOLEANleftPLUSMINUSleftMULTIPLYDIVIDErightEQUALSAND BOOL CHAR CLASS CLOSEBRACE CLOSEBRACKET CLOSEPARENTHESES COMMA CTEF CTEI CTESTRING DIFFERENT DIVIDE DO DOT ELSE EQUALS EQUALS_BOOLEAN FLOAT FOR FUNCTION GREATER GREATEREQUAL ID IF INT LESS LESSEQUAL MAIN MINUS MULTIPLY OPENBRACE OPENBRACKET OPENPARENTHESES OR PLUS PRINT PROGRAM QUOTATIONMARK READ RETURN SEMICOLON THEN TO TWODOTS VARS WHILE WRITE\n    programa : PROGRAM ID SEMICOLON establishglobalscope programaP\n    establishglobalscope :\n    programaP : vars programaP\n    | clase programaP\n    | funcion programaP\n    | bloque\n    | empty\n    \n    clase : CLASS ID OPENBRACE claseP CLOSEBRACE\n    \n    claseP : vars clasePP\n         | clasePP\n    \n    clasePP : funcion clasePP\n            | empty\n    \n    funcion : FUNCTION tipo TWODOTS ID savefuncscope OPENPARENTHESES paramsfunction CLOSEPARENTHESES OPENBRACE estatuto CLOSEBRACE\n    \n    savefuncscope : \n    \n    paramsfunction : tipo param COMMA paramsfunction\n                    | tipo param\n    \n    return : RETURN exp\n            | RETURN\n    \n    vars : VARS tipo savetype TWODOTS varsP\n    \n    varsP : param COMMA varsP\n            | param SEMICOLON\n    \n    savetype : \n    \n    param : ID\n        | ID OPENBRACKET paramsP CLOSEBRACKET\n    \n    paramsP : exp COMMA paramsP\n            | exp\n    \n    tipo : INT\n         | FLOAT\n         | CHAR\n         | BOOL\n    \n    bloque : MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE establishmainscope estatuto CLOSEBRACE\n            | MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE CLOSEBRACE\n    \n    establishmainscope : \n    \n    estatuto : asignacion estatuto\n        | llamada estatuto\n        | retorno estatuto\n        | lectura estatuto\n        | escritura estatuto\n        | repeticion estatuto\n        | declaracion estatuto\n        | empty\n    \n    declaracion : vars\n    \n    llamada : ID OPENPARENTHESES param CLOSEPARENTHESES SEMICOLON\n        | ID OPENPARENTHESES CLOSEPARENTHESES SEMICOLON\n    \n    retorno : RETURN OPENPARENTHESES exp CLOSEPARENTHESES SEMICOLON\n    \n    lectura : READ OPENPARENTHESES param CLOSEPARENTHESES SEMICOLON\n    \n    asignacion : ID EQUALS exp SEMICOLON\n        | ID OPENBRACKET paramsP CLOSEBRACKET EQUALS exp SEMICOLON\n    \n    escritura : WRITE OPENPARENTHESES escrituraP CLOSEPARENTHESES SEMICOLON\n    \n    escrituraP : QUOTATIONMARK CTESTRING QUOTATIONMARK COMMA escrituraP\n        | exp COMMA escrituraP\n        | ID COMMA escrituraP\n        | QUOTATIONMARK CTESTRING QUOTATIONMARK\n        | exp\n        | ID\n    \n    condicion : IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE\n    \n    repeticion : condicional\n        | no_condicional\n    \n    condicional : WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE estatuto CLOSEBRACE\n        | WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE CLOSEBRACE\n    \n    no_condicional : FOR ID EQUALS exp TO exp OPENBRACE estatuto CLOSEBRACE\n        | FOR ID EQUALS exp TO exp DO OPENBRACE CLOSEBRACE\n    \n    exp : termino\n    | exp PLUS termino\n    | exp MINUS termino\n    \n    termino : factor\n    | termino MULTIPLY factor\n    | termino DIVIDE factor\n    \n    factor : ID OPENPARENTHESES exp CLOSEPARENTHESES\n    | ID\n    | CTEF\n    | CTEI\n    | OPENPARENTHESES h_exp CLOSEPARENTHESES\n    \n    h_exp : s_exp\n    | s_exp AND h_exp\n    | s_exp OR h_exp\n    \n    s_exp : exp\n    | exp GREATER exp\n    | exp LESS exp\n    | exp DIFFERENT exp\n    | exp EQUALS_BOOLEAN exp\n    | exp LESSEQUAL exp\n    | exp GREATEREQUAL exp\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,7,8,9,10,11,16,17,18,39,42,47,49,70,81,171,],[0,-2,-88,-1,-88,-88,-88,-6,-7,-3,-4,-5,-19,-8,-32,-21,-20,-31,-13,]),'ID':([2,13,20,21,22,23,29,31,38,39,46,48,49,50,53,54,55,56,57,58,59,65,66,67,69,70,76,79,89,90,91,92,93,94,95,97,99,100,101,102,103,120,128,129,130,131,132,133,134,135,137,138,141,146,147,161,162,163,164,165,170,173,174,176,179,180,182,185,186,],[3,24,-27,-28,-29,-30,37,41,-33,-19,61,41,-21,71,61,61,61,61,61,61,61,-61,-62,-42,96,-20,71,41,71,71,41,71,41,118,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,61,-47,-44,118,118,71,-43,-45,-46,-49,71,118,61,-48,-64,61,-63,-65,-66,]),'SEMICOLON':([3,40,41,71,74,75,77,78,98,109,112,123,124,125,126,127,140,142,143,144,150,172,],[4,49,-23,-74,-67,-70,-75,-76,-24,138,141,-68,-69,-71,-72,-77,162,163,164,165,-73,176,]),'VARS':([4,5,7,8,9,28,38,39,42,46,49,53,54,55,56,57,58,59,65,66,67,70,137,138,141,162,163,164,165,171,174,176,179,180,182,185,186,],[-2,12,12,12,12,12,-33,-19,-8,12,-21,12,12,12,12,12,12,12,-61,-62,-42,-20,12,-47,-44,-43,-45,-46,-49,-13,12,-48,-64,12,-63,-65,-66,]),'CLASS':([4,5,7,8,9,39,42,49,70,171,],[-2,13,13,13,13,-19,-8,-21,-20,-13,]),'FUNCTION':([4,5,7,8,9,28,33,35,39,42,49,70,171,],[-2,14,14,14,14,14,14,14,-19,-8,-21,-20,-13,]),'MAIN':([4,5,7,8,9,39,42,49,70,171,],[-2,15,15,15,15,-19,-8,-21,-20,-13,]),'INT':([12,14,51,136,],[20,20,20,20,]),'FLOAT':([12,14,51,136,],[21,21,21,21,]),'CHAR':([12,14,51,136,],[22,22,22,22,]),'BOOL':([12,14,51,136,],[23,23,23,23,]),'OPENPARENTHESES':([15,37,45,50,61,62,63,64,68,71,76,89,90,92,94,95,97,99,100,101,102,103,118,120,128,129,130,131,132,133,134,135,146,147,161,170,173,],[26,-14,51,76,91,92,93,94,95,97,76,76,76,76,76,76,76,76,76,76,76,76,97,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'TWODOTS':([19,20,21,22,23,25,27,],[-22,-27,-28,-29,-30,29,31,]),'OPENBRACE':([24,30,71,74,75,77,78,108,123,124,125,126,127,150,169,175,181,],[28,38,-74,-67,-70,-75,-76,137,-68,-69,-71,-72,-77,-73,174,180,184,]),'CLOSEPARENTHESES':([26,41,71,74,75,77,78,80,91,98,104,105,106,107,111,113,114,115,117,118,119,121,123,124,125,126,127,150,151,152,153,154,155,156,157,158,159,166,167,168,177,],[30,-23,-74,-67,-70,-75,-76,108,112,-24,127,-78,-81,-16,140,142,143,144,-54,-55,148,150,-68,-69,-71,-72,-77,-73,-79,-80,-82,-83,-84,-85,-86,-87,-15,-53,-51,-52,-50,]),'CLOSEBRACE':([28,32,33,34,35,36,38,39,43,44,46,49,52,53,54,55,56,57,58,59,60,65,66,67,70,82,83,84,85,86,87,88,137,138,141,160,162,163,164,165,171,174,176,178,179,180,182,183,184,185,186,],[-88,42,-88,-10,-88,-12,47,-19,-9,-11,-88,-21,81,-88,-88,-88,-88,-88,-88,-88,-41,-61,-62,-42,-20,-34,-35,-36,-37,-38,-39,-40,-88,-47,-44,171,-43,-45,-46,-49,-13,179,-48,182,-64,-88,-63,185,186,-65,-66,]),'RETURN':([38,39,46,49,53,54,55,56,57,58,59,65,66,67,70,137,138,141,162,163,164,165,174,176,179,180,182,185,186,],[-33,-19,62,-21,62,62,62,62,62,62,62,-61,-62,-42,-20,62,-47,-44,-43,-45,-46,-49,62,-48,-64,62,-63,-65,-66,]),'READ':([38,39,46,49,53,54,55,56,57,58,59,65,66,67,70,137,138,141,162,163,164,165,174,176,179,180,182,185,186,],[-33,-19,63,-21,63,63,63,63,63,63,63,-61,-62,-42,-20,63,-47,-44,-43,-45,-46,-49,63,-48,-64,63,-63,-65,-66,]),'WRITE':([38,39,46,49,53,54,55,56,57,58,59,65,66,67,70,137,138,141,162,163,164,165,174,176,179,180,182,185,186,],[-33,-19,64,-21,64,64,64,64,64,64,64,-61,-62,-42,-20,64,-47,-44,-43,-45,-46,-49,64,-48,-64,64,-63,-65,-66,]),'WHILE':([38,39,46,49,53,54,55,56,57,58,59,65,66,67,70,137,138,141,162,163,164,165,174,176,179,180,182,185,186,],[-33,-19,68,-21,68,68,68,68,68,68,68,-61,-62,-42,-20,68,-47,-44,-43,-45,-46,-49,68,-48,-64,68,-63,-65,-66,]),'FOR':([38,39,46,49,53,54,55,56,57,58,59,65,66,67,70,137,138,141,162,163,164,165,174,176,179,180,182,185,186,],[-33,-19,69,-21,69,69,69,69,69,69,69,-61,-62,-42,-20,69,-47,-44,-43,-45,-46,-49,69,-48,-64,69,-63,-65,-66,]),'COMMA':([40,41,71,73,74,75,77,78,98,107,117,118,123,124,125,126,127,150,166,],[48,-23,-74,99,-67,-70,-75,-76,-24,136,146,147,-68,-69,-71,-72,-77,-73,173,]),'OPENBRACKET':([41,61,],[50,90,]),'CTEF':([50,76,89,90,92,94,95,97,99,100,101,102,103,120,128,129,130,131,132,133,134,135,146,147,161,170,173,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'CTEI':([50,76,89,90,92,94,95,97,99,100,101,102,103,120,128,129,130,131,132,133,134,135,146,147,161,170,173,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'EQUALS':([61,96,139,],[89,120,161,]),'MULTIPLY':([71,74,75,77,78,118,123,124,125,126,127,150,],[-74,102,-70,-75,-76,-74,102,102,-71,-72,-77,-73,]),'DIVIDE':([71,74,75,77,78,118,123,124,125,126,127,150,],[-74,103,-70,-75,-76,-74,103,103,-71,-72,-77,-73,]),'PLUS':([71,73,74,75,77,78,106,109,113,117,118,119,121,123,124,125,126,127,149,150,153,154,155,156,157,158,172,175,],[-74,100,-67,-70,-75,-76,100,100,100,100,-74,100,100,-68,-69,-71,-72,-77,100,-73,100,100,100,100,100,100,100,100,]),'MINUS':([71,73,74,75,77,78,106,109,113,117,118,119,121,123,124,125,126,127,149,150,153,154,155,156,157,158,172,175,],[-74,101,-67,-70,-75,-76,101,101,101,101,-74,101,101,-68,-69,-71,-72,-77,101,-73,101,101,101,101,101,101,101,101,]),'CLOSEBRACKET':([71,72,73,74,75,77,78,110,122,123,124,125,126,127,150,],[-74,98,-26,-67,-70,-75,-76,139,-25,-68,-69,-71,-72,-77,-73,]),'GREATER':([71,74,75,77,78,106,123,124,125,126,127,150,],[-74,-67,-70,-75,-76,130,-68,-69,-71,-72,-77,-73,]),'LESS':([71,74,75,77,78,106,123,124,125,126,127,150,],[-74,-67,-70,-75,-76,131,-68,-69,-71,-72,-77,-73,]),'DIFFERENT':([71,74,75,77,78,106,123,124,125,126,127,150,],[-74,-67,-70,-75,-76,132,-68,-69,-71,-72,-77,-73,]),'EQUALS_BOOLEAN':([71,74,75,77,78,106,123,124,125,126,127,150,],[-74,-67,-70,-75,-76,133,-68,-69,-71,-72,-77,-73,]),'LESSEQUAL':([71,74,75,77,78,106,123,124,125,126,127,150,],[-74,-67,-70,-75,-76,134,-68,-69,-71,-72,-77,-73,]),'GREATEREQUAL':([71,74,75,77,78,106,123,124,125,126,127,150,],[-74,-67,-70,-75,-76,135,-68,-69,-71,-72,-77,-73,]),'AND':([71,74,75,77,78,105,106,123,124,125,126,127,150,153,154,155,156,157,158,],[-74,-67,-70,-75,-76,128,-81,-68,-69,-71,-72,-77,-73,-82,-83,-84,-85,-86,-87,]),'OR':([71,74,75,77,78,105,106,123,124,125,126,127,150,153,154,155,156,157,158,],[-74,-67,-70,-75,-76,129,-81,-68,-69,-71,-72,-77,-73,-82,-83,-84,-85,-86,-87,]),'TO':([71,74,75,77,78,123,124,125,126,127,149,150,],[-74,-67,-70,-75,-76,-68,-69,-71,-72,-77,170,-73,]),'DO':([71,74,75,77,78,123,124,125,126,127,148,150,175,],[-74,-67,-70,-75,-76,-68,-69,-71,-72,-77,169,-73,181,]),'QUOTATIONMARK':([94,145,146,147,173,],[116,166,116,116,116,]),'CTESTRING':([116,],[145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'establishglobalscope':([4,],[5,]),'programaP':([5,7,8,9,],[6,16,17,18,]),'vars':([5,7,8,9,28,46,53,54,55,56,57,58,59,137,174,180,],[7,7,7,7,33,67,67,67,67,67,67,67,67,67,67,67,]),'clase':([5,7,8,9,],[8,8,8,8,]),'funcion':([5,7,8,9,28,33,35,],[9,9,9,9,35,35,35,]),'bloque':([5,7,8,9,],[10,10,10,10,]),'empty':([5,7,8,9,28,33,35,46,53,54,55,56,57,58,59,137,174,180,],[11,11,11,11,36,36,36,60,60,60,60,60,60,60,60,60,60,60,]),'tipo':([12,14,51,136,],[19,25,79,79,]),'savetype':([19,],[27,]),'claseP':([28,],[32,]),'clasePP':([28,33,35,],[34,43,44,]),'varsP':([31,48,],[39,70,]),'param':([31,48,79,91,93,],[40,40,107,111,114,]),'savefuncscope':([37,],[45,]),'establishmainscope':([38,],[46,]),'estatuto':([46,53,54,55,56,57,58,59,137,174,180,],[52,82,83,84,85,86,87,88,160,178,183,]),'asignacion':([46,53,54,55,56,57,58,59,137,174,180,],[53,53,53,53,53,53,53,53,53,53,53,]),'llamada':([46,53,54,55,56,57,58,59,137,174,180,],[54,54,54,54,54,54,54,54,54,54,54,]),'retorno':([46,53,54,55,56,57,58,59,137,174,180,],[55,55,55,55,55,55,55,55,55,55,55,]),'lectura':([46,53,54,55,56,57,58,59,137,174,180,],[56,56,56,56,56,56,56,56,56,56,56,]),'escritura':([46,53,54,55,56,57,58,59,137,174,180,],[57,57,57,57,57,57,57,57,57,57,57,]),'repeticion':([46,53,54,55,56,57,58,59,137,174,180,],[58,58,58,58,58,58,58,58,58,58,58,]),'declaracion':([46,53,54,55,56,57,58,59,137,174,180,],[59,59,59,59,59,59,59,59,59,59,59,]),'condicional':([46,53,54,55,56,57,58,59,137,174,180,],[65,65,65,65,65,65,65,65,65,65,65,]),'no_condicional':([46,53,54,55,56,57,58,59,137,174,180,],[66,66,66,66,66,66,66,66,66,66,66,]),'paramsP':([50,90,99,],[72,110,122,]),'exp':([50,76,89,90,92,94,95,97,99,120,128,129,130,131,132,133,134,135,146,147,161,170,173,],[73,106,109,73,113,117,119,121,73,149,106,106,153,154,155,156,157,158,117,117,172,175,117,]),'termino':([50,76,89,90,92,94,95,97,99,100,101,120,128,129,130,131,132,133,134,135,146,147,161,170,173,],[74,74,74,74,74,74,74,74,74,123,124,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'factor':([50,76,89,90,92,94,95,97,99,100,101,102,103,120,128,129,130,131,132,133,134,135,146,147,161,170,173,],[75,75,75,75,75,75,75,75,75,75,75,125,126,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'paramsfunction':([51,136,],[80,159,]),'h_exp':([76,128,129,],[104,151,152,]),'s_exp':([76,128,129,],[105,105,105,]),'escrituraP':([94,146,147,173,],[115,167,168,177,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON establishglobalscope programaP','programa',5,'p_programa','lexyacc.py',126),
  ('establishglobalscope -> <empty>','establishglobalscope',0,'p_establishglobalscope','lexyacc.py',134),
  ('programaP -> vars programaP','programaP',2,'p_programaP','lexyacc.py',146),
  ('programaP -> clase programaP','programaP',2,'p_programaP','lexyacc.py',147),
  ('programaP -> funcion programaP','programaP',2,'p_programaP','lexyacc.py',148),
  ('programaP -> bloque','programaP',1,'p_programaP','lexyacc.py',149),
  ('programaP -> empty','programaP',1,'p_programaP','lexyacc.py',150),
  ('clase -> CLASS ID OPENBRACE claseP CLOSEBRACE','clase',5,'p_clase','lexyacc.py',155),
  ('claseP -> vars clasePP','claseP',2,'p_claseP','lexyacc.py',161),
  ('claseP -> clasePP','claseP',1,'p_claseP','lexyacc.py',162),
  ('clasePP -> funcion clasePP','clasePP',2,'p_clasePP','lexyacc.py',167),
  ('clasePP -> empty','clasePP',1,'p_clasePP','lexyacc.py',168),
  ('funcion -> FUNCTION tipo TWODOTS ID savefuncscope OPENPARENTHESES paramsfunction CLOSEPARENTHESES OPENBRACE estatuto CLOSEBRACE','funcion',11,'p_funcion','lexyacc.py',173),
  ('savefuncscope -> <empty>','savefuncscope',0,'p_savefuncscope','lexyacc.py',178),
  ('paramsfunction -> tipo param COMMA paramsfunction','paramsfunction',4,'p_paramsfunction','lexyacc.py',187),
  ('paramsfunction -> tipo param','paramsfunction',2,'p_paramsfunction','lexyacc.py',188),
  ('return -> RETURN exp','return',2,'p_return','lexyacc.py',194),
  ('return -> RETURN','return',1,'p_return','lexyacc.py',195),
  ('vars -> VARS tipo savetype TWODOTS varsP','vars',5,'p_vars','lexyacc.py',200),
  ('varsP -> param COMMA varsP','varsP',3,'p_varsP','lexyacc.py',205),
  ('varsP -> param SEMICOLON','varsP',2,'p_varsP','lexyacc.py',206),
  ('savetype -> <empty>','savetype',0,'p_savetype','lexyacc.py',211),
  ('param -> ID','param',1,'p_param','lexyacc.py',220),
  ('param -> ID OPENBRACKET paramsP CLOSEBRACKET','param',4,'p_param','lexyacc.py',221),
  ('paramsP -> exp COMMA paramsP','paramsP',3,'p_paramsP','lexyacc.py',235),
  ('paramsP -> exp','paramsP',1,'p_paramsP','lexyacc.py',236),
  ('tipo -> INT','tipo',1,'p_tipo','lexyacc.py',241),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lexyacc.py',242),
  ('tipo -> CHAR','tipo',1,'p_tipo','lexyacc.py',243),
  ('tipo -> BOOL','tipo',1,'p_tipo','lexyacc.py',244),
  ('bloque -> MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE establishmainscope estatuto CLOSEBRACE','bloque',7,'p_bloque','lexyacc.py',250),
  ('bloque -> MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE CLOSEBRACE','bloque',5,'p_bloque','lexyacc.py',251),
  ('establishmainscope -> <empty>','establishmainscope',0,'p_establishmainscope','lexyacc.py',257),
  ('estatuto -> asignacion estatuto','estatuto',2,'p_estatuto','lexyacc.py',269),
  ('estatuto -> llamada estatuto','estatuto',2,'p_estatuto','lexyacc.py',270),
  ('estatuto -> retorno estatuto','estatuto',2,'p_estatuto','lexyacc.py',271),
  ('estatuto -> lectura estatuto','estatuto',2,'p_estatuto','lexyacc.py',272),
  ('estatuto -> escritura estatuto','estatuto',2,'p_estatuto','lexyacc.py',273),
  ('estatuto -> repeticion estatuto','estatuto',2,'p_estatuto','lexyacc.py',274),
  ('estatuto -> declaracion estatuto','estatuto',2,'p_estatuto','lexyacc.py',275),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexyacc.py',276),
  ('declaracion -> vars','declaracion',1,'p_declaracion','lexyacc.py',281),
  ('llamada -> ID OPENPARENTHESES param CLOSEPARENTHESES SEMICOLON','llamada',5,'p_llamada','lexyacc.py',286),
  ('llamada -> ID OPENPARENTHESES CLOSEPARENTHESES SEMICOLON','llamada',4,'p_llamada','lexyacc.py',287),
  ('retorno -> RETURN OPENPARENTHESES exp CLOSEPARENTHESES SEMICOLON','retorno',5,'p_retorno','lexyacc.py',292),
  ('lectura -> READ OPENPARENTHESES param CLOSEPARENTHESES SEMICOLON','lectura',5,'p_lectura','lexyacc.py',297),
  ('asignacion -> ID EQUALS exp SEMICOLON','asignacion',4,'p_asignacion','lexyacc.py',302),
  ('asignacion -> ID OPENBRACKET paramsP CLOSEBRACKET EQUALS exp SEMICOLON','asignacion',7,'p_asignacion','lexyacc.py',303),
  ('escritura -> WRITE OPENPARENTHESES escrituraP CLOSEPARENTHESES SEMICOLON','escritura',5,'p_escritura','lexyacc.py',316),
  ('escrituraP -> QUOTATIONMARK CTESTRING QUOTATIONMARK COMMA escrituraP','escrituraP',5,'p_escrituraP','lexyacc.py',321),
  ('escrituraP -> exp COMMA escrituraP','escrituraP',3,'p_escrituraP','lexyacc.py',322),
  ('escrituraP -> ID COMMA escrituraP','escrituraP',3,'p_escrituraP','lexyacc.py',323),
  ('escrituraP -> QUOTATIONMARK CTESTRING QUOTATIONMARK','escrituraP',3,'p_escrituraP','lexyacc.py',324),
  ('escrituraP -> exp','escrituraP',1,'p_escrituraP','lexyacc.py',325),
  ('escrituraP -> ID','escrituraP',1,'p_escrituraP','lexyacc.py',326),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE','condicion',12,'p_condicion','lexyacc.py',331),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE','condicion',11,'p_condicion','lexyacc.py',332),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE CLOSEBRACE','condicion',11,'p_condicion','lexyacc.py',333),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE','condicion',8,'p_condicion','lexyacc.py',334),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE','condicion',7,'p_condicion','lexyacc.py',335),
  ('repeticion -> condicional','repeticion',1,'p_repeticion','lexyacc.py',340),
  ('repeticion -> no_condicional','repeticion',1,'p_repeticion','lexyacc.py',341),
  ('condicional -> WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE estatuto CLOSEBRACE','condicional',8,'p_condicional','lexyacc.py',346),
  ('condicional -> WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE CLOSEBRACE','condicional',7,'p_condicional','lexyacc.py',347),
  ('no_condicional -> FOR ID EQUALS exp TO exp OPENBRACE estatuto CLOSEBRACE','no_condicional',9,'p_nocondicional','lexyacc.py',352),
  ('no_condicional -> FOR ID EQUALS exp TO exp DO OPENBRACE CLOSEBRACE','no_condicional',9,'p_nocondicional','lexyacc.py',353),
  ('exp -> termino','exp',1,'p_exp','lexyacc.py',360),
  ('exp -> exp PLUS termino','exp',3,'p_exp','lexyacc.py',361),
  ('exp -> exp MINUS termino','exp',3,'p_exp','lexyacc.py',362),
  ('termino -> factor','termino',1,'p_termino','lexyacc.py',386),
  ('termino -> termino MULTIPLY factor','termino',3,'p_termino','lexyacc.py',387),
  ('termino -> termino DIVIDE factor','termino',3,'p_termino','lexyacc.py',388),
  ('factor -> ID OPENPARENTHESES exp CLOSEPARENTHESES','factor',4,'p_factor','lexyacc.py',413),
  ('factor -> ID','factor',1,'p_factor','lexyacc.py',414),
  ('factor -> CTEF','factor',1,'p_factor','lexyacc.py',415),
  ('factor -> CTEI','factor',1,'p_factor','lexyacc.py',416),
  ('factor -> OPENPARENTHESES h_exp CLOSEPARENTHESES','factor',3,'p_factor','lexyacc.py',417),
  ('h_exp -> s_exp','h_exp',1,'p_hexp','lexyacc.py',441),
  ('h_exp -> s_exp AND h_exp','h_exp',3,'p_hexp','lexyacc.py',442),
  ('h_exp -> s_exp OR h_exp','h_exp',3,'p_hexp','lexyacc.py',443),
  ('s_exp -> exp','s_exp',1,'p_sexp','lexyacc.py',448),
  ('s_exp -> exp GREATER exp','s_exp',3,'p_sexp','lexyacc.py',449),
  ('s_exp -> exp LESS exp','s_exp',3,'p_sexp','lexyacc.py',450),
  ('s_exp -> exp DIFFERENT exp','s_exp',3,'p_sexp','lexyacc.py',451),
  ('s_exp -> exp EQUALS_BOOLEAN exp','s_exp',3,'p_sexp','lexyacc.py',452),
  ('s_exp -> exp LESSEQUAL exp','s_exp',3,'p_sexp','lexyacc.py',453),
  ('s_exp -> exp GREATEREQUAL exp','s_exp',3,'p_sexp','lexyacc.py',454),
  ('empty -> <empty>','empty',0,'p_empty','lexyacc.py',459),
]
