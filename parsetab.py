
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSGREATERLESSEQUALGREATEREQUALEQUALS_BOOLEANleftPLUSMINUSleftMULTIPLYDIVIDErightEQUALSAND CHAR CLASS CLOSEBRACE CLOSEBRACKET CLOSEPARENTHESES COMMA CTEF CTEI CTESTRING DIFFERENT DIVIDE DO DOT ELSE EQUALS EQUALS_BOOLEAN FLOAT FOR FUNCTION GREATER GREATEREQUAL ID IF INT LESS LESSEQUAL MAIN MINUS MULTIPLY OPENBRACE OPENBRACKET OPENPARENTHESES OR PLUS PRINT PROGRAM QUOTATIONMARK READ RETURN SEMICOLON THEN TO TWODOTS VARS WHILE WRITE\n    programa : PROGRAM ID SEMICOLON programaP\n    \n    programaP : vars clase bloque\n    | vars bloque\n    | clase bloque\n    | bloque\n    | empty\n    \n    clase : CLASS ID OPENBRACE claseP CLOSEBRACE\n    \n    claseP : VARS TWODOTS vars claseP \n         | clasePP\n    \n    clasePP : funciones clasePP\n            | funciones\n            | empty\n    \n    funciones : tipo FUNCTION ID OPENPARENTHESES params CLOSEPARENTHESES OPENBRACE SEMICOLON vars estatuto return CLOSEBRACE\n    | empty\n    \n    return : RETURN ID\n            | RETURN exp\n            | RETURN\n            | empty\n    \n    vars : varsP\n        | varsP vars\n    \n    varsP : VARS tipo TWODOTS params SEMICOLON\n    \n    params : ID\n        | ID OPENBRACKET paramsP CLOSEBRACKET\n        | ID OPENBRACKET paramsP CLOSEBRACKET COMMA params\n        | ID COMMA params\n    \n    paramsP : CTEI\n        | ID\n        | params_index\n    \n    params_index : ID\n        | ID OPENBRACKET CTEI CLOSEBRACKET\n        | ID OPENBRACKET ID CLOSEBRACKET\n        | ID OPENBRACKET params_index CLOSEBRACKET\n        | empty\n    \n    tipo : INT\n         | FLOAT\n         | CHAR\n    \n    bloque : MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE estatuto CLOSEBRACE\n            | MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE CLOSEBRACE\n            | empty\n    \n    estatuto : asignacion\n        | llamada\n        | retorno\n        | lectura\n        | escritura\n        | decision\n        | repeticion\n        | estatuto\n        | empty\n    \n    decision : empty\n    \n    llamada : ID OPENPARENTHESES params CLOSEPARENTHESES SEMICOLON\n        | ID OPENPARENTHESES CLOSEPARENTHESES SEMICOLON\n        | empty\n    \n    retorno : RETURN OPENPARENTHESES exp CLOSEPARENTHESES SEMICOLON\n    | empty\n    \n    lectura : READ OPENPARENTHESES params CLOSEPARENTHESES SEMICOLON\n    | empty\n    \n    asignacion : ID EQUALS exp SEMICOLON\n        | ID OPENBRACKET CTEI CLOSEBRACKET EQUALS exp SEMICOLON\n        | ID OPENBRACKET ID CLOSEBRACKET EQUALS exp SEMICOLON\n        | ID OPENBRACKET params_index CLOSEBRACKET EQUALS exp SEMICOLON\n    \n    escritura : WRITE OPENPARENTHESES escrituraP\n    | empty\n    \n    escrituraP : QUOTATIONMARK CTESTRING QUOTATIONMARK COMMA escrituraP\n        | exp COMMA escrituraP\n        | QUOTATIONMARK CTESTRING QUOTATIONMARK CLOSEPARENTHESES SEMICOLON\n        | exp CLOSEPARENTHESES SEMICOLON\n    \n    condicion : IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE\n          | IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE\n          | empty\n    \n    repeticion : condicional\n        | no_condicional\n        | empty\n    \n    condicional : WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE estatuto CLOSEBRACE\n        | WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE CLOSEBRACE\n        | empty\n    \n    no_condicional : FOR ID EQUALS exp TO exp OPENBRACE estatuto CLOSEBRACE\n        | FOR ID EQUALS exp TO exp DO OPENBRACE CLOSEBRACE\n        | empty\n    \n    exp : termino\n    | exp PLUS termino\n    | exp MINUS termino\n    \n    termino : factor\n    | termino MULTIPLY factor\n    | termino DIVIDE factor\n    \n    factor : ID OPENPARENTHESES exp CLOSEPARENTHESES\n    | ID\n    | CTEF\n    | CTEI\n    | OPENPARENTHESES h_exp CLOSEPARENTHESES\n    \n    h_exp : s_exp\n    | s_exp AND h_exp\n    | s_exp OR h_exp\n    \n    s_exp : exp\n    | exp GREATER exp\n    | exp LESS exp\n    | exp DIFFERENT exp\n    | exp EQUALS_BOOLEAN exp\n    | exp LESSEQUAL exp\n    | exp GREATEREQUAL exp\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,7,8,9,10,14,15,16,17,18,25,38,43,60,65,],[0,-103,-1,-103,-103,-5,-6,-19,-103,-3,-39,-4,-20,-2,-7,-38,-21,-37,]),'ID':([2,10,11,18,28,35,41,59,60,61,62,66,67,68,69,70,71,72,81,86,100,101,104,106,107,108,109,121,128,136,137,138,139,140,141,142,143,144,145,146,154,172,174,184,186,194,],[3,-19,19,-20,37,52,64,73,-21,74,37,82,89,37,82,37,82,82,37,82,82,125,82,82,82,82,82,82,37,82,82,82,82,82,82,82,82,82,82,82,82,82,52,52,52,197,]),'SEMICOLON':([3,36,37,79,82,83,84,85,87,88,93,102,116,118,119,122,131,132,133,134,135,158,159,160,169,170,171,173,],[4,60,-22,-25,-89,105,-82,-85,-90,-91,117,-23,147,148,149,152,-83,-84,-86,-87,-92,-24,176,-88,177,178,179,181,]),'CLASS':([4,6,10,18,60,],[11,11,-19,-20,-21,]),'MAIN':([4,6,7,10,14,18,38,60,],[12,12,12,-19,12,-20,-7,-21,]),'VARS':([4,10,18,26,39,60,63,176,],[13,13,-20,30,13,-21,30,13,]),'INT':([10,13,18,26,32,33,60,63,196,],[-19,22,-20,22,22,-14,-21,22,-13,]),'FLOAT':([10,13,18,26,32,33,60,63,196,],[-19,23,-20,23,23,-14,-21,23,-13,]),'CHAR':([10,13,18,26,32,33,60,63,196,],[-19,24,-20,24,24,-14,-21,24,-13,]),'CLOSEBRACE':([10,18,26,29,31,32,33,35,40,42,44,45,46,47,48,49,50,51,56,57,60,63,80,82,84,85,87,88,96,105,117,131,132,133,134,135,147,148,149,151,152,160,174,177,178,179,180,181,182,183,184,186,187,188,189,190,191,192,193,194,195,196,197,198,],[-19,-20,-103,38,-9,-11,-12,43,-10,65,-40,-41,-42,-43,-44,-45,-46,-48,-73,-74,-21,-103,-8,-89,-82,-85,-90,-91,-61,-57,-51,-83,-84,-86,-87,-92,-50,-53,-55,-64,-66,-88,183,-59,-58,-60,-63,-65,187,-77,-103,-103,-76,191,192,-47,-79,-80,196,-17,-18,-13,-15,-16,]),'RETURN':([10,18,35,44,45,46,47,48,49,50,51,56,57,60,96,105,117,147,148,149,151,152,174,177,178,179,180,181,183,184,186,187,190,191,192,],[-19,-20,53,-40,-41,-42,-43,-44,-45,-46,-48,-73,-74,-21,-61,-57,-51,-50,-53,-55,-64,-66,53,-59,-58,-60,-63,-65,-77,53,53,-76,194,-79,-80,]),'READ':([10,18,35,60,174,184,186,],[-19,-20,54,-21,54,54,54,]),'WRITE':([10,18,35,60,174,184,186,],[-19,-20,55,-21,55,55,55,]),'WHILE':([10,18,35,60,174,184,186,],[-19,-20,58,-21,58,58,58,]),'FOR':([10,18,35,60,174,184,186,],[-19,-20,59,-21,59,59,59,]),'OPENPARENTHESES':([12,52,53,54,55,58,64,66,69,71,72,82,86,100,104,106,107,108,109,121,136,137,138,139,140,141,142,143,144,145,146,154,172,194,197,],[20,68,69,70,71,72,81,86,86,86,86,104,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,104,]),'OPENBRACE':([19,27,82,84,85,87,88,129,131,132,133,134,135,153,160,175,185,],[26,35,-89,-82,-85,-90,-91,159,-83,-84,-86,-87,-92,174,-88,184,189,]),'CLOSEPARENTHESES':([20,37,68,79,82,84,85,87,88,92,94,95,98,99,102,103,110,111,112,130,131,132,133,134,135,150,158,160,161,162,163,164,165,166,167,168,],[27,-22,93,-25,-89,-82,-85,-90,-91,116,118,119,122,123,-23,129,135,-93,-96,160,-83,-84,-86,-87,-92,173,-24,-88,-94,-95,-97,-98,-99,-100,-101,-102,]),'TWODOTS':([21,22,23,24,30,],[28,-34,-35,-36,39,]),'FUNCTION':([22,23,24,34,],[-34,-35,-36,41,]),'OPENBRACKET':([37,52,74,89,125,],[61,67,101,101,101,]),'COMMA':([37,82,84,85,87,88,98,102,131,132,133,134,135,150,160,],[62,-89,-82,-85,-90,-91,121,128,-83,-84,-86,-87,-92,172,-88,]),'EQUALS':([52,73,113,114,115,],[66,100,144,145,146,]),'CTEI':([61,66,67,69,71,72,86,100,101,104,106,107,108,109,121,136,137,138,139,140,141,142,143,144,145,146,154,172,194,],[76,88,90,88,88,88,88,88,126,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'CLOSEBRACKET':([61,67,74,75,76,77,78,89,90,91,101,125,126,127,155,156,157,],[-103,-103,-27,102,-26,-28,-33,113,114,115,-103,155,156,157,-31,-30,-32,]),'CTEF':([66,69,71,72,86,100,104,106,107,108,109,121,136,137,138,139,140,141,142,143,144,145,146,154,172,194,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'QUOTATIONMARK':([71,120,121,172,],[97,150,97,97,]),'MULTIPLY':([82,84,85,87,88,131,132,133,134,135,160,197,],[-89,108,-85,-90,-91,108,108,-86,-87,-92,-88,-89,]),'DIVIDE':([82,84,85,87,88,131,132,133,134,135,160,197,],[-89,109,-85,-90,-91,109,109,-86,-87,-92,-88,-89,]),'PLUS':([82,83,84,85,87,88,94,98,99,112,124,130,131,132,133,134,135,160,163,164,165,166,167,168,169,170,171,175,197,198,],[-89,106,-82,-85,-90,-91,106,106,106,106,106,106,-83,-84,-86,-87,-92,-88,106,106,106,106,106,106,106,106,106,106,-89,106,]),'MINUS':([82,83,84,85,87,88,94,98,99,112,124,130,131,132,133,134,135,160,163,164,165,166,167,168,169,170,171,175,197,198,],[-89,107,-82,-85,-90,-91,107,107,107,107,107,107,-83,-84,-86,-87,-92,-88,107,107,107,107,107,107,107,107,107,107,-89,107,]),'GREATER':([82,84,85,87,88,112,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,138,-83,-84,-86,-87,-92,-88,]),'LESS':([82,84,85,87,88,112,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,139,-83,-84,-86,-87,-92,-88,]),'DIFFERENT':([82,84,85,87,88,112,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,140,-83,-84,-86,-87,-92,-88,]),'EQUALS_BOOLEAN':([82,84,85,87,88,112,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,141,-83,-84,-86,-87,-92,-88,]),'LESSEQUAL':([82,84,85,87,88,112,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,142,-83,-84,-86,-87,-92,-88,]),'GREATEREQUAL':([82,84,85,87,88,112,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,143,-83,-84,-86,-87,-92,-88,]),'AND':([82,84,85,87,88,111,112,131,132,133,134,135,160,163,164,165,166,167,168,],[-89,-82,-85,-90,-91,136,-96,-83,-84,-86,-87,-92,-88,-97,-98,-99,-100,-101,-102,]),'OR':([82,84,85,87,88,111,112,131,132,133,134,135,160,163,164,165,166,167,168,],[-89,-82,-85,-90,-91,137,-96,-83,-84,-86,-87,-92,-88,-97,-98,-99,-100,-101,-102,]),'TO':([82,84,85,87,88,124,131,132,133,134,135,160,],[-89,-82,-85,-90,-91,154,-83,-84,-86,-87,-92,-88,]),'DO':([82,84,85,87,88,123,131,132,133,134,135,160,175,],[-89,-82,-85,-90,-91,153,-83,-84,-86,-87,-92,-88,185,]),'CTESTRING':([97,],[120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'programaP':([4,],[5,]),'vars':([4,10,39,176,],[6,18,63,186,]),'clase':([4,6,],[7,14,]),'bloque':([4,6,7,14,],[8,15,17,25,]),'empty':([4,6,7,14,26,32,35,61,63,67,101,174,184,186,190,],[9,16,16,16,33,33,51,78,33,78,78,51,51,51,195,]),'varsP':([4,10,39,176,],[10,10,10,10,]),'tipo':([13,26,32,63,],[21,34,34,34,]),'claseP':([26,63,],[29,80,]),'clasePP':([26,32,63,],[31,40,31,]),'funciones':([26,32,63,],[32,32,32,]),'params':([28,62,68,70,81,128,],[36,79,92,95,103,158,]),'estatuto':([35,174,184,186,],[42,182,188,190,]),'asignacion':([35,174,184,186,],[44,44,44,44,]),'llamada':([35,174,184,186,],[45,45,45,45,]),'retorno':([35,174,184,186,],[46,46,46,46,]),'lectura':([35,174,184,186,],[47,47,47,47,]),'escritura':([35,174,184,186,],[48,48,48,48,]),'decision':([35,174,184,186,],[49,49,49,49,]),'repeticion':([35,174,184,186,],[50,50,50,50,]),'condicional':([35,174,184,186,],[56,56,56,56,]),'no_condicional':([35,174,184,186,],[57,57,57,57,]),'paramsP':([61,],[75,]),'params_index':([61,67,101,],[77,91,127,]),'exp':([66,69,71,72,86,100,104,121,136,137,138,139,140,141,142,143,144,145,146,154,172,194,],[83,94,98,99,112,124,130,98,112,112,163,164,165,166,167,168,169,170,171,175,98,198,]),'termino':([66,69,71,72,86,100,104,106,107,121,136,137,138,139,140,141,142,143,144,145,146,154,172,194,],[84,84,84,84,84,84,84,131,132,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'factor':([66,69,71,72,86,100,104,106,107,108,109,121,136,137,138,139,140,141,142,143,144,145,146,154,172,194,],[85,85,85,85,85,85,85,85,85,133,134,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'escrituraP':([71,121,172,],[96,151,180,]),'h_exp':([86,136,137,],[110,161,162,]),'s_exp':([86,136,137,],[111,111,111,]),'return':([190,],[193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON programaP','programa',4,'p_programa','lexyacc.py',116),
  ('programaP -> vars clase bloque','programaP',3,'p_programaP','lexyacc.py',122),
  ('programaP -> vars bloque','programaP',2,'p_programaP','lexyacc.py',123),
  ('programaP -> clase bloque','programaP',2,'p_programaP','lexyacc.py',124),
  ('programaP -> bloque','programaP',1,'p_programaP','lexyacc.py',125),
  ('programaP -> empty','programaP',1,'p_programaP','lexyacc.py',126),
  ('clase -> CLASS ID OPENBRACE claseP CLOSEBRACE','clase',5,'p_clase','lexyacc.py',131),
  ('claseP -> VARS TWODOTS vars claseP','claseP',4,'p_claseP','lexyacc.py',136),
  ('claseP -> clasePP','claseP',1,'p_claseP','lexyacc.py',137),
  ('clasePP -> funciones clasePP','clasePP',2,'p_clasePP','lexyacc.py',142),
  ('clasePP -> funciones','clasePP',1,'p_clasePP','lexyacc.py',143),
  ('clasePP -> empty','clasePP',1,'p_clasePP','lexyacc.py',144),
  ('funciones -> tipo FUNCTION ID OPENPARENTHESES params CLOSEPARENTHESES OPENBRACE SEMICOLON vars estatuto return CLOSEBRACE','funciones',12,'p_funciones','lexyacc.py',149),
  ('funciones -> empty','funciones',1,'p_funciones','lexyacc.py',150),
  ('return -> RETURN ID','return',2,'p_return','lexyacc.py',155),
  ('return -> RETURN exp','return',2,'p_return','lexyacc.py',156),
  ('return -> RETURN','return',1,'p_return','lexyacc.py',157),
  ('return -> empty','return',1,'p_return','lexyacc.py',158),
  ('vars -> varsP','vars',1,'p_vars','lexyacc.py',163),
  ('vars -> varsP vars','vars',2,'p_vars','lexyacc.py',164),
  ('varsP -> VARS tipo TWODOTS params SEMICOLON','varsP',5,'p_varsP','lexyacc.py',169),
  ('params -> ID','params',1,'p_params','lexyacc.py',179),
  ('params -> ID OPENBRACKET paramsP CLOSEBRACKET','params',4,'p_params','lexyacc.py',180),
  ('params -> ID OPENBRACKET paramsP CLOSEBRACKET COMMA params','params',6,'p_params','lexyacc.py',181),
  ('params -> ID COMMA params','params',3,'p_params','lexyacc.py',182),
  ('paramsP -> CTEI','paramsP',1,'p_paramsP','lexyacc.py',197),
  ('paramsP -> ID','paramsP',1,'p_paramsP','lexyacc.py',198),
  ('paramsP -> params_index','paramsP',1,'p_paramsP','lexyacc.py',199),
  ('params_index -> ID','params_index',1,'p_paramsIndex','lexyacc.py',204),
  ('params_index -> ID OPENBRACKET CTEI CLOSEBRACKET','params_index',4,'p_paramsIndex','lexyacc.py',205),
  ('params_index -> ID OPENBRACKET ID CLOSEBRACKET','params_index',4,'p_paramsIndex','lexyacc.py',206),
  ('params_index -> ID OPENBRACKET params_index CLOSEBRACKET','params_index',4,'p_paramsIndex','lexyacc.py',207),
  ('params_index -> empty','params_index',1,'p_paramsIndex','lexyacc.py',208),
  ('tipo -> INT','tipo',1,'p_tipo','lexyacc.py',213),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lexyacc.py',214),
  ('tipo -> CHAR','tipo',1,'p_tipo','lexyacc.py',215),
  ('bloque -> MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE estatuto CLOSEBRACE','bloque',6,'p_bloque','lexyacc.py',221),
  ('bloque -> MAIN OPENPARENTHESES CLOSEPARENTHESES OPENBRACE CLOSEBRACE','bloque',5,'p_bloque','lexyacc.py',222),
  ('bloque -> empty','bloque',1,'p_bloque','lexyacc.py',223),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','lexyacc.py',235),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','lexyacc.py',236),
  ('estatuto -> retorno','estatuto',1,'p_estatuto','lexyacc.py',237),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','lexyacc.py',238),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','lexyacc.py',239),
  ('estatuto -> decision','estatuto',1,'p_estatuto','lexyacc.py',240),
  ('estatuto -> repeticion','estatuto',1,'p_estatuto','lexyacc.py',241),
  ('estatuto -> estatuto','estatuto',1,'p_estatuto','lexyacc.py',242),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexyacc.py',243),
  ('decision -> empty','decision',1,'p_decision','lexyacc.py',247),
  ('llamada -> ID OPENPARENTHESES params CLOSEPARENTHESES SEMICOLON','llamada',5,'p_llamada','lexyacc.py',252),
  ('llamada -> ID OPENPARENTHESES CLOSEPARENTHESES SEMICOLON','llamada',4,'p_llamada','lexyacc.py',253),
  ('llamada -> empty','llamada',1,'p_llamada','lexyacc.py',254),
  ('retorno -> RETURN OPENPARENTHESES exp CLOSEPARENTHESES SEMICOLON','retorno',5,'p_retorno','lexyacc.py',259),
  ('retorno -> empty','retorno',1,'p_retorno','lexyacc.py',260),
  ('lectura -> READ OPENPARENTHESES params CLOSEPARENTHESES SEMICOLON','lectura',5,'p_lectura','lexyacc.py',265),
  ('lectura -> empty','lectura',1,'p_lectura','lexyacc.py',266),
  ('asignacion -> ID EQUALS exp SEMICOLON','asignacion',4,'p_asignacion','lexyacc.py',271),
  ('asignacion -> ID OPENBRACKET CTEI CLOSEBRACKET EQUALS exp SEMICOLON','asignacion',7,'p_asignacion','lexyacc.py',272),
  ('asignacion -> ID OPENBRACKET ID CLOSEBRACKET EQUALS exp SEMICOLON','asignacion',7,'p_asignacion','lexyacc.py',273),
  ('asignacion -> ID OPENBRACKET params_index CLOSEBRACKET EQUALS exp SEMICOLON','asignacion',7,'p_asignacion','lexyacc.py',274),
  ('escritura -> WRITE OPENPARENTHESES escrituraP','escritura',3,'p_escritura','lexyacc.py',280),
  ('escritura -> empty','escritura',1,'p_escritura','lexyacc.py',281),
  ('escrituraP -> QUOTATIONMARK CTESTRING QUOTATIONMARK COMMA escrituraP','escrituraP',5,'p_escrituraP','lexyacc.py',286),
  ('escrituraP -> exp COMMA escrituraP','escrituraP',3,'p_escrituraP','lexyacc.py',287),
  ('escrituraP -> QUOTATIONMARK CTESTRING QUOTATIONMARK CLOSEPARENTHESES SEMICOLON','escrituraP',5,'p_escrituraP','lexyacc.py',288),
  ('escrituraP -> exp CLOSEPARENTHESES SEMICOLON','escrituraP',3,'p_escrituraP','lexyacc.py',289),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE','condicion',12,'p_condicion','lexyacc.py',294),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE ELSE OPENBRACE estatuto CLOSEBRACE','condicion',11,'p_condicion','lexyacc.py',295),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE ELSE OPENBRACE CLOSEBRACE','condicion',11,'p_condicion','lexyacc.py',296),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE estatuto CLOSEBRACE','condicion',8,'p_condicion','lexyacc.py',297),
  ('condicion -> IF OPENPARENTHESES exp CLOSEPARENTHESES THEN OPENBRACE CLOSEBRACE','condicion',7,'p_condicion','lexyacc.py',298),
  ('condicion -> empty','condicion',1,'p_condicion','lexyacc.py',299),
  ('repeticion -> condicional','repeticion',1,'p_repeticion','lexyacc.py',304),
  ('repeticion -> no_condicional','repeticion',1,'p_repeticion','lexyacc.py',305),
  ('repeticion -> empty','repeticion',1,'p_repeticion','lexyacc.py',306),
  ('condicional -> WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE estatuto CLOSEBRACE','condicional',8,'p_condicional','lexyacc.py',311),
  ('condicional -> WHILE OPENPARENTHESES exp CLOSEPARENTHESES DO OPENBRACE CLOSEBRACE','condicional',7,'p_condicional','lexyacc.py',312),
  ('condicional -> empty','condicional',1,'p_condicional','lexyacc.py',313),
  ('no_condicional -> FOR ID EQUALS exp TO exp OPENBRACE estatuto CLOSEBRACE','no_condicional',9,'p_nocondicional','lexyacc.py',318),
  ('no_condicional -> FOR ID EQUALS exp TO exp DO OPENBRACE CLOSEBRACE','no_condicional',9,'p_nocondicional','lexyacc.py',319),
  ('no_condicional -> empty','no_condicional',1,'p_nocondicional','lexyacc.py',320),
  ('exp -> termino','exp',1,'p_exp','lexyacc.py',327),
  ('exp -> exp PLUS termino','exp',3,'p_exp','lexyacc.py',328),
  ('exp -> exp MINUS termino','exp',3,'p_exp','lexyacc.py',329),
  ('termino -> factor','termino',1,'p_termino','lexyacc.py',338),
  ('termino -> termino MULTIPLY factor','termino',3,'p_termino','lexyacc.py',339),
  ('termino -> termino DIVIDE factor','termino',3,'p_termino','lexyacc.py',340),
  ('factor -> ID OPENPARENTHESES exp CLOSEPARENTHESES','factor',4,'p_factor','lexyacc.py',350),
  ('factor -> ID','factor',1,'p_factor','lexyacc.py',351),
  ('factor -> CTEF','factor',1,'p_factor','lexyacc.py',352),
  ('factor -> CTEI','factor',1,'p_factor','lexyacc.py',353),
  ('factor -> OPENPARENTHESES h_exp CLOSEPARENTHESES','factor',3,'p_factor','lexyacc.py',354),
  ('h_exp -> s_exp','h_exp',1,'p_hexp','lexyacc.py',359),
  ('h_exp -> s_exp AND h_exp','h_exp',3,'p_hexp','lexyacc.py',360),
  ('h_exp -> s_exp OR h_exp','h_exp',3,'p_hexp','lexyacc.py',361),
  ('s_exp -> exp','s_exp',1,'p_sexp','lexyacc.py',370),
  ('s_exp -> exp GREATER exp','s_exp',3,'p_sexp','lexyacc.py',371),
  ('s_exp -> exp LESS exp','s_exp',3,'p_sexp','lexyacc.py',372),
  ('s_exp -> exp DIFFERENT exp','s_exp',3,'p_sexp','lexyacc.py',373),
  ('s_exp -> exp EQUALS_BOOLEAN exp','s_exp',3,'p_sexp','lexyacc.py',374),
  ('s_exp -> exp LESSEQUAL exp','s_exp',3,'p_sexp','lexyacc.py',375),
  ('s_exp -> exp GREATEREQUAL exp','s_exp',3,'p_sexp','lexyacc.py',376),
  ('empty -> <empty>','empty',0,'p_empty','lexyacc.py',393),
]
